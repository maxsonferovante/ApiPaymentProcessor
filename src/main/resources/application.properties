# =======================================================================
# API PAYMENT PROCESSOR - CONFIGURAÇÃO PRINCIPAL COM OTIMIZAÇÕES
# =======================================================================

# Spring Boot Configuration
spring.application.name=${SPRING_APPLICATION_NAME:ApiPaymentProcessor}
spring.threads.virtual.enabled=${SPRING_THREADS_VIRTUAL_ENABLED:true}

# =======================================================================
# CONFIGURAÇÕES DE LOGGING - OTIMIZADAS PARA PERFORMANCE
# =======================================================================
logging.level.root=${LOGGING_LEVEL_ROOT:ERROR}
logging.level.com.maal.apipaymentprocessor=${LOGGING_LEVEL_APP:WARN}
logging.pattern.console=%d{HH:mm:ss} %-5level %logger{36} - %msg%n

# =======================================================================
# CONFIGURAÇÕES DO SERVIDOR - ULTRA-OTIMIZADAS
# =======================================================================
server.port=${SERVER_PORT:8089}

# Configurações Tomcat para máxima performance
server.tomcat.threads.max=${TOMCAT_THREADS_MAX:200}
server.tomcat.threads.min-spare=${TOMCAT_THREADS_MIN_SPARE:10}
server.tomcat.max-connections=${TOMCAT_MAX_CONNECTIONS:1000}
server.tomcat.accept-count=${TOMCAT_ACCEPT_COUNT:500}
server.tomcat.connection-timeout=${TOMCAT_CONNECTION_TIMEOUT:8000ms}

# Compressão para reduzir I/O de rede
server.compression.enabled=${SERVER_COMPRESSION_ENABLED:true}
server.compression.mime-types=${SERVER_COMPRESSION_MIME_TYPES:application/json,text/plain,text/html}
server.compression.min-response-size=${SERVER_COMPRESSION_MIN_SIZE:1024}

# =======================================================================
# CONFIGURAÇÕES DO POSTGRESQL - POOL HIKARICP OTIMIZADO
# =======================================================================
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://localhost:5433/rinha}
spring.datasource.username=${DATABASE_USERNAME:user}
spring.datasource.password=${DATABASE_PASSWORD:rinha2025}
spring.datasource.driver-class-name=${DATABASE_DRIVER:org.postgresql.Driver}

# Pool de conexões ultra-otimizado
spring.datasource.hikari.maximum-pool-size=${HIKARI_MAXIMUM_POOL_SIZE:15}
spring.datasource.hikari.minimum-idle=${HIKARI_MINIMUM_IDLE:5}
spring.datasource.hikari.connection-timeout=${HIKARI_CONNECTION_TIMEOUT:20000}
spring.datasource.hikari.idle-timeout=${HIKARI_IDLE_TIMEOUT:600000}
spring.datasource.hikari.max-lifetime=${HIKARI_MAX_LIFETIME:1800000}
spring.datasource.hikari.pool-name=${HIKARI_POOL_NAME:RinhaHikariPool}
spring.datasource.hikari.validation-timeout=${HIKARI_VALIDATION_TIMEOUT:5000}
spring.datasource.hikari.leak-detection-threshold=${HIKARI_LEAK_DETECTION:10000}

# =======================================================================
# CONFIGURAÇÕES DO REDIS - PERFORMANCE TUNING AVANÇADO
# =======================================================================
spring.data.redis.host=${REDIS_HOST:localhost}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.timeout=${REDIS_TIMEOUT:500ms}
spring.data.redis.database=${REDIS_DATABASE:0}

# Pool de conexões Redis Lettuce otimizado
spring.data.redis.lettuce.pool.max-active=${REDIS_POOL_MAX_ACTIVE:8}
spring.data.redis.lettuce.pool.max-idle=${REDIS_POOL_MAX_IDLE:4}
spring.data.redis.lettuce.pool.min-idle=${REDIS_POOL_MIN_IDLE:2}
spring.data.redis.lettuce.pool.time-between-eviction-runs=${REDIS_POOL_EVICTION_TIME:10s}

# =======================================================================
# OTIMIZAÇÕES GERAIS DE PERFORMANCE
# =======================================================================
# Desabilitar recursos desnecessários para máxima performance
spring.jmx.enabled=${SPRING_JMX_ENABLED:false}
spring.main.banner-mode=${SPRING_BANNER_MODE:off}
spring.devtools.restart.enabled=${SPRING_DEVTOOLS_RESTART:false}
spring.devtools.livereload.enabled=${SPRING_DEVTOOLS_LIVERELOAD:false}

# =======================================================================
# PROPRIEDADES CUSTOMIZADAS DA APLICAÇÃO
# =======================================================================
rinha.queue.payments-main=${REDIS_QUEUE_PAYMENTS_MAIN:rinha-payments-main-queue}